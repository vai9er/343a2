def create_groups(self, assignment_to_group: int, other_assignment: int, repo_prefix: str) -> bool:
        try:
            # Get the cursor
            cursor = self.connection.cursor()

            # Check if both assignments exist
            sql_check_assignments_exist = """
            SELECT EXISTS(SELECT 1 FROM Assignment WHERE assignment_id = %s),
                EXISTS(SELECT 1 FROM Assignment WHERE assignment_id = %s)
            """
            cursor.execute(sql_check_assignments_exist, (assignment_to_group, other_assignment))
            assignment_exists, other_assignment_exists = cursor.fetchone()
            if not (assignment_exists and other_assignment_exists):
                return False

            # Check if any groups have already been created for assignment_to_group
            sql_check_no_groups = """
            SELECT count(*) FROM AssignmentGroup WHERE assignment_id = %s
            """
            cursor.execute(sql_check_no_groups, (assignment_to_group,))
            if cursor.fetchone()[0] > 0:
                return False

            # Get the maximum number of people in a group for assignment_to_group
            cursor.execute("SELECT group_max FROM Assignment WHERE assignment_id = %s", (assignment_to_group,))
            group_max_record = cursor.fetchone()
            if group_max_record is None:
                return False
            group_max = group_max_record[0]

            # Get all the students in order of grades and alphabetical username
            sql_students_ordered = """
            SELECT MU.username
            FROM MarkusUser MU
            LEFT JOIN Membership M ON MU.username = M.username
            LEFT JOIN AssignmentGroup AG ON M.group_id = AG.group_id
            LEFT JOIN Result R ON AG.group_id = R.group_id AND AG.assignment_id = %s
            WHERE MU.type = 'student'
            ORDER BY R.mark DESC NULLS LAST, MU.username;
            """
            cursor.execute(sql_students_ordered, (other_assignment,))
            students = cursor.fetchall()

            # If there are no students, return True
            if not students:
                return True

            counter = 0
            group_id = None

            # Go through the students and assign them to groups
            for student in students:
                if counter == 0:
                    # Start a new group
                    cursor.execute("SELECT nextval('group_id_seq')")
                    group_id = cursor.fetchone()[0]
                    repo = f"{repo_prefix}/group_{group_id}"
                    cursor.execute(
                        "INSERT INTO AssignmentGroup (group_id, assignment_id, repo) VALUES (%s, %s, %s)",
                        (group_id, assignment_to_group, repo)
                    )

                # Add the student to the group
                cursor.execute(
                    "INSERT INTO Membership (username, group_id) VALUES (%s, %s)",
                    (student[0], group_id)
                )
                counter += 1

                # Check if this is the last student or if the group is at max capacity
                if counter == group_max or student == students[-1]:
                    counter = 0  # Reset counter for a new group

            # Commit the transaction
            self.connection.commit()
            return True

        except pg.Error as ex:
            # Rollback in case of error
            self.connection.rollback()
            # Uncomment the line below to see the error details during debugging
            # print(ex)
            return False

        finally:
            # Close the cursor
            cursor.close()


def test_create_groups() -> None:
    """Test method create_groups.
    """
    dbname = "csc343h-vainerga"
    user = "vainerga"
    password = ""
    # The following uses the relative paths to the schema file and the data file
    # we have provided. For your own tests, you will want to make your own data
    # files to use for testing.
    schema_file = "schema.ddl"
    data_file = "data.sql"
    data_nostudents = "data-nostudents.sql"
    data_group3 = "data-group3.sql"
    a2 = Markus()
    try:
        connected = a2.connect(dbname, user, password)
        # The following is an assert statement. It checks that the value for
        # connected is True. The message after the comma will be printed if
        # that is not the case (that is, if connected is False).
        # Use the same notation throughout your testing.
        assert connected, f"[Connect] Expected True | Got {connected}."
        # The following function call will set up the testing environment by
        # loading a fresh copy of the schema and the sample data we have
        # provided into your database. You can create more sample data files
        # and call the same function to load them into your database.
        setup(dbname, user, password, schema_file, data_file)
        # ---------------------- Testing get_groups_count ---------------------#
        # Failure: Invalid assignment ID for grouping
        val = a2.create_groups(20, 1, "bobby/")
        assert val == False, f"[Create Groups] Expected: False. Got {val}."
        # Failure: Invalid assignment ID for other assignment
        val = a2.create_groups(1, 20, "bobby/")
        assert val == False, f"[Create Groups] Expected: False. Got {val}."
        # Failure: Group already defined for assignment
        val = a2.create_groups(1, 2, "bobby/")
        assert val == False, f"[Create Groups] Expected: False. Got {val}."
        # Success: no students in db, no changes
        setup(dbname, user, password, schema_file, data_nostudents)
        val = a2.create_groups(1, 2, "bobby/")
        assert val == True, f"[Create Groups] Expected: True. Got {val}."
        # Success: group size k = 1, some students don't have a grade
        setup(dbname, user, password, schema_file, data_file)
        val = a2.create_groups(4, 1, "bobby/")
        assert val == True, f"[Create Groups] Expected: True. Got {val}."
        # # Success: group size k = 3 and num students % 3 != 0
        setup(dbname, user, password, schema_file, data_group3)
        val = a2.create_groups(4, 1, "bobby/")
        assert val == True, f"[Create Groups] Expected: True. Got {val}."
    finally:
        a2.disconnect()
